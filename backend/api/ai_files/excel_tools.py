#ne pas faire d'import circular
from openpyxl import load_workbook
from .classifier import theme_classifier, sentiment_classifier
import pandas as pd
import logging

from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib.units import cm
import matplotlib.pyplot as plt
import geopandas as gpd
import os
from datetime import datetime

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

def complete_excel(file_path):
    logging.info(file_path)
    # Charger le fichier Excel existant
    wb = load_workbook(file_path)
    ws = wb.active

    # D√©finir les en-t√™tes de colonnes attendus
    headers = ["Date", "Territoire", "Sujet", "Th√®me", "Qualit√© du retour", "M√©dia", "Articles"]
    
    # Trouver l‚Äôindex des colonnes en fonction des en-t√™tes
    header_row = list(ws.iter_rows(min_row=1, max_row=1, values_only=True))[0]  # Premi√®re ligne
    header_indices = {header: i for i, header in enumerate(header_row) if header in headers}
    theme_qr = ["Th√®me", "Qualit√© du retour"]
    theme_qr_indices = {header: i for i, header in enumerate(header_row) if header in theme_qr}

    # V√©rifier chaque ligne (√† partir de la 2√®me, car la 1√®re est l‚Äôen-t√™te)
    i = 0
    for row in ws.iter_rows(min_row=2, max_row=ws.max_row):
        i+=1
        logging.info(i/ws.max_row)
        for header, col_idx in theme_qr_indices.items():
            cell = row[col_idx]  # R√©cup√©rer la cellule correspondant √† la colonne
            if cell.value is None or str(cell.value).strip() == "":
                #cell.value = "1"  # Remplacer les valeurs vides par None
                if headers[col_idx] == "Th√®me":
                    article = {}
                    article["Date"] = str(row[header_indices['Date']].value).strip()
                    article["Territoire"] = str(row[header_indices['Territoire']].value).strip()
                    article["Sujet"] = str(row[header_indices['Sujet']].value).strip()
                    article["M√©dia"] = str(row[header_indices['M√©dia']].value).strip()
                    article["Articles"] = str(row[header_indices['Articles']].value).strip()
                    cell.value = theme_classifier(article)['Th√®me']
                if headers[col_idx] == "Qualit√© du retour":
                    cell.value = sentiment_classifier(str(row[header_indices['Articles']].value).strip())

    # Sauvegarder les modifications
    wb.save(file_path)




def generate_pdf_result(excel_path_file):
    # Charger le fichier Excel
    wb = load_workbook(excel_path_file)
    ws = wb.active

    # D√©finir les en-t√™tes de colonnes attendus
    headers = ["Date", "Territoire", "Sujet", "Th√®me", "Qualit√© du retour", "M√©dia", "Articles"]

    # Trouver l‚Äôindex des colonnes en fonction des en-t√™tes
    header_row = list(ws.iter_rows(min_row=1, max_row=1, values_only=True))[0]  # Premi√®re ligne
    header_indices = {header: i for i, header in enumerate(header_row) if header in headers}

    # Cr√©er un DataFrame √† partir des donn√©es
    data = []
    for row in ws.iter_rows(min_row=1, values_only=True):  # Commencer √† la 2·µâ ligne
        data.append({header: row[col_idx] for header, col_idx in header_indices.items()})
    df = pd.DataFrame(data)

    df.columns = df.columns.astype(str)  # Forcer en `str`
    df.columns = df.columns.str.strip()  # Supprimer les espaces autour des noms
    df.columns = df.columns.str.replace("\n", " ")  # Supprimer les sauts de ligne √©ventuels

    # üöÄ DEBUG : V√©rifier les colonnes

    #G√©n√®re le pdf
    temp_pdf_path = generate_pdf_from_dataframe(df)

    return temp_pdf_path

def generate_pdf_from_dataframe(df, pdf_filename="rapport_graphes.pdf"):
    """
    G√©n√®re un PDF contenant :
    - Une page de pr√©sentation avec la date et le logo Enedis.
    - Une carte de la France.
    - Un histogramme des th√®mes par m√©dia.
    - Un camembert de la r√©partition des m√©dias.

    Param√®tres :
    - df (pd.DataFrame) : DataFrame contenant au moins les colonnes "Th√®me" et "M√©dia".
    - pdf_filename (str) : Nom du fichier PDF de sortie.
    - geojson_path (str) : Chemin vers le fichier GeoJSON des d√©partements fran√ßais.
    - enedis_logo_path (str) : Chemin vers le logo Enedis.
    """
    geojson_path="./api/ai_files/files_pdfgenerator/departements.geojson"
    enedis_logo_path="./api/ai_files/files_pdfgenerator/enedis_logo.png"
    ia_logo_path = "./api/ai_files/files_pdfgenerator/ia.png"


    # V√©rifier la pr√©sence des colonnes requises
    if "Th√®me" not in df.columns or "M√©dia" not in df.columns:
        raise ValueError("Le DataFrame doit contenir les colonnes 'Th√®me' et 'M√©dia'.")

    # Dimensions de la page PDF
    width, height = A4

    # Cr√©ation du PDF
    temp_path = f"/tmp/result_{pdf_filename}"

    c = canvas.Canvas(temp_path, pagesize=A4)

    ### üìå PAGE 1 : Page de pr√©sentation ###
    c.drawImage(enedis_logo_path, 3 * cm, height - 10 * cm, width=15 * cm, height=12 * cm)

    # Obtenir la date actuelle
    date_aujourd_hui = datetime.now()
    date_formatee = date_aujourd_hui.strftime("%-d %B %Y")

    c.setFont("Helvetica", 18)
    c.drawCentredString(width / 2, height - 7 * cm, date_formatee)

    c.setFont("Helvetica", 14)
    c.drawImage(ia_logo_path, 1 * cm, height - 12 * cm, width=5 * cm, height=3 * cm)
    c.drawCentredString(width / 2, height - 10.5 * cm, "Xposure")

    c.showPage()  # Nouvelle page

    ### üìå PAGE 2 : Sommaire ###
    c.setFont("Helvetica-Bold", 22)
    c.drawString(2 * cm, height - 3 * cm, "Sommaire")

    c.setFont("Helvetica", 14)
    c.drawString(3 * cm, height - 6 * cm, "1. G√©ographie ..................................... Page 3")
    c.drawString(3 * cm, height - 8 * cm, "2. Analyse des Th√®mes par M√©dia ................ Page 4")

    c.showPage()  # Nouvelle page

    ### üìå PAGE 3 : Carte de la France ###
    c.setFont("Helvetica-Bold", 20)
    c.drawString(2 * cm, height - 3 * cm, "1. G√©ographie")

    # Charger la carte de la France depuis un GeoJSON
    france = gpd.read_file(geojson_path)

    # V√©rification du syst√®me de coordonn√©es et reprojection si n√©cessaire
    if france.crs is None or france.crs.to_epsg() != 3857:
        france = france.to_crs(epsg=3857)

    # Cr√©ation de la figure avec fond de carte
    fig, ax = plt.subplots(figsize=(6, 6))
    france.plot(ax=ax, color="#FAEBD7", edgecolor="black")

    ax.set_xticks([])
    ax.set_yticks([])
    ax.set_frame_on(False)

    # Sauvegarde temporaire de la figure
    map_filename = "map_france.png"
    fig.savefig(map_filename, bbox_inches="tight", dpi=150)
    plt.close(fig)

    # Ins√©rer la carte dans le PDF
    c.drawImage(map_filename, 2 * cm, height - 18 * cm, width=15 * cm, height=12 * cm)

    c.showPage()  # Nouvelle page

    ### üìå PAGE 4 : Analyse des Th√®mes par M√©dia ###
    c.setFont("Helvetica-Bold", 20)
    c.drawString(2 * cm, height - 3 * cm, "2. Analyse des Th√®mes par M√©dia")

    # üîπ **Graphe 1 : Histogramme des th√®mes par m√©dia**
    theme_counts = df.groupby("M√©dia")["Th√®me"].value_counts().unstack(fill_value=0)

    fig, ax = plt.subplots(figsize=(8, 6))
    theme_counts.plot(kind="bar", stacked=True, ax=ax, colormap="Set3")
    ax.set_title("R√©partition des Th√®mes par M√©dia")
    ax.set_xlabel("M√©dia")
    ax.set_ylabel("Nombre de Th√®mes")
    ax.legend(title="Th√®mes", loc="best", fontsize=8)
    plt.xticks(rotation=45)

    # Sauvegarde temporaire
    graph1_filename = "graph_theme_media_bar.png"
    fig.savefig(graph1_filename, bbox_inches="tight", dpi=150)
    plt.close(fig)

    # üîπ **Graphe 2 : Camembert des M√©dias**
    fig, ax = plt.subplots(figsize=(6, 6))
    df["M√©dia"].value_counts().plot.pie(autopct='%1.1f%%', startangle=90, colormap="Pastel1", ax=ax)
    ax.set_ylabel("")
    ax.set_title("R√©partition des M√©dias")

    # Sauvegarde temporaire
    graph2_filename = "graph_media_pie.png"
    fig.savefig(graph2_filename, bbox_inches="tight", dpi=150)
    plt.close(fig)

    # üìå Ins√©rer les graphes dans le PDF
    c.drawImage(graph1_filename, 2 * cm, height - 18 * cm, width=15 * cm, height=12 * cm)
    c.showPage()

    c.drawImage(graph2_filename, 2 * cm, height - 18 * cm, width=15 * cm, height=12 * cm)
    c.showPage()

    # Sauvegarde finale du PDF
    c.save()

    # üî• Supprimer les images temporaires
    os.remove(map_filename)
    os.remove(graph1_filename)
    os.remove(graph2_filename)

    logging.info(f"‚úÖ PDF g√©n√©r√© avec succ√®s : {pdf_filename}")

    return temp_path

